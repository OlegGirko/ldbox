#!/bin/bash
#
# Copyright (c) 2008 Nokia Corporation.
# All rights reserved.
#
# Licensed under GPL version 2

prog="$0"
progbase=`basename $0`

error_not_inside_lb()
{
	echo "ldbox: $progbase wrapper: This wrapper can only be used from inside"
	echo "the scratchbox 2'ed environment"
	exit 1
}

if [ -z "$LDBOX_SESSION_DIR" ]
then
	error_not_inside_lb
fi

. $LDBOX_SESSION_DIR/lb-session.conf.sh

if [ -z "$ldbox_mapmode" -o -z "$ldbox_dir" ]
then
	error_not_inside_lb
fi

# read-in mode-specific settings
if [ -f $LDBOX_SESSION_DIR/modes/$ldbox_mapmode/lbrc ]
then
	. $LDBOX_SESSION_DIR/modes/$ldbox_mapmode/lbrc "$progbase"
fi

#
# Create initialization file for gdb that provides helper
# macro that is used to stop running process before main()
# gets called.
#
cat > $LDBOX_SESSION_DIR/gdbinit << EOF
def lb-prepare
	set breakpoint pending on
	tbreak _dl_debug_state
	set breakpoint pending off
end

document lb-prepare
Prepares the target process for being debugged.

If you are attaching to an already running process or examining a core
dump, this step is not necessary.

Run this command before starting the target program. It will set a
breakpoint which is used to stop the target before its main() gets
called. After the breakpoint is hit, you are able to set further
breakpoints and do normal debugging actions.

Example:
(lb-emulate-gdb) lb-prepare
(lb-emulate-gdb) run
...
and now gdb will stop and you are able to set further breakpoints etc.
end

set prompt (lb-$ldbox_mapmode-gdb)
echo \ngdb: read 'help lb-prepare' before running programs.\n
EOF

#
# lb script sets SHELL to tools by default but in emulation
# mode, we don't have access there so we reset SHELL to correct
# value in case we are in emulation mode.
#
if [ "$ldbox_mapmode" = "emulate" ]
then
	SHELL=/bin/sh
fi
exec $ldbox_target_root/usr/bin/gdb -command $LDBOX_SESSION_DIR/gdbinit "$@"
