#!/bin/bash
# lb-config-gcc-toolchain - configure a cross-gcc compiler for LB
#
# Copyright (c) 2008 Nokia Corporation.
# Copyright (C) 2007 Lauri Leukkunen <lle@rahina.org>
# Licensed under GPL version 2

prefix="@prefix@"
exec_prefix="@exec_prefix@"
bindir="@bindir@"
libdir="@libdir@"
datadir="@datadir@"
LDBOX_SHARE_DIR="${datadir}/ldbox"

function log_config_action()
{
	tstamp=`/bin/date '+%Y-%m-%d %H:%M:%S'`
	echo "$tstamp	$*" >>$LDBOX_CONFIG_DIR/CONFIG-LOG
}

# Get the original arguments that were specified to lb-init from
function usage()
{
	cat <<EOF
lb-config-gcc-toolchain - Configure a cross-gcc compiler for LB
Usage:
	lb-config-gcc-toolchain [OPTION]... [COMPILER]

COMPILER is of the form $HOME/arm-2006q3/bin/arm-linux-gcc

Options:
	################
    -t target         set target name
    -C "options"      add extra options for the compiler, for example:
                      "-fgnu89-inline"
    -L "options"      add extra options for the linker, for example:
                      "--sysroot=/"
    -A arch           manually override target architecture
    -h                print this help
    -m mapping_mode   target uses mapping_mode as default mode
    -R TARGET_ROOT    define value for LDBOX_TARGET_ROOT
    -V                this toolchain is a secondary toolchain,
                      tools require version numbers in pathnames
    -v                verbose operation

EOF
	exit 2
}

function write_gcc_config()
{
	gcc_version=$1

	if [ -n "$gcc_version" ] ; then
		gcc_version_id=`echo $gcc_version | sed -e 's/[^0-9a-zA-Z]/_/g'`
	fi

	LDBOX_TARGET_TOOLCHAIN_DIR=$(dirname "$LDBOX_CROSS_GCC_DIR")
	LDBOX_CROSS_GCC_PREFIX_LIST=$GCC_TARGET-:$LBINIT_CROSS_GCC_PREFIX_LIST:$GCC_PREFIX

	# Note: "lb" script will replace "@LDBOX_TARGET_ROOT@" by the real
	# value when the session is created.
	LDBOX_EXTRA_CROSS_LD_ARGS="$LDBOX_EXTRA_CROSS_LD_ARGS -rpath-link @LDBOX_TARGET_ROOT@/usr/lib:@LDBOX_TARGET_ROOT@/lib"
	LDBOX_CROSS_GCC_SUBST_PREFIX=$GCC_PREFIX

	cat - > $HOME/.ldbox/$TARGET/lb.config.d/gcc$gcc_version_id.config.sh <<EOF
# gcc configuration file generated by lb-config-gcc-toolchain.
LB_GCC_INIT_ORIG_ARGS="$LB_GCC_INIT_ORIG_ARGS"
LB_GCC_INIT_TIME=$LB_GCC_INIT_TIME
LB_GCC_INIT_ID="$LB_GCC_INIT_ID"
LB_GCC_INIT_ARCH="$ARCH"

LDBOX_GCC_TARGET=$GCC_TARGET
LDBOX_DEFAULT_GCC_PREFIX=$GCC_PREFIX
LDBOX_CROSS_GCC_NAME=cross-gcc
LDBOX_CROSS_GCC_VERSION="$LDBOX_CROSS_GCC_VERSION"
LDBOX_CROSS_GCC_SHORTVERSION="$LDBOX_CROSS_GCC_SHORTVERSION"
LDBOX_CROSS_GCC_PREFIX_LIST=$LDBOX_CROSS_GCC_PREFIX_LIST
LDBOX_CROSS_GCC_SUBST_PREFIX=$LDBOX_CROSS_GCC_SUBST_PREFIX
LDBOX_CROSS_GCC_SPECS_FILE="$LDBOX_CROSS_GCC_SPECS_FILE"
LDBOX_CROSS_GCC_DIR=$LDBOX_CROSS_GCC_DIR
LDBOX_CROSS_GCC_LD_ARGS=

LDBOX_EXTRA_CROSS_COMPILER_ARGS="$LDBOX_EXTRA_CROSS_COMPILER_ARGS"
LDBOX_EXTRA_CROSS_COMPILER_STDINC="$LDBOX_EXTRA_CROSS_COMPILER_STDINC"
LDBOX_EXTRA_CROSS_LD_ARGS="$LDBOX_EXTRA_CROSS_LD_ARGS"
EOF

	cat - > $HOME/.ldbox/$TARGET/lb.config.d/gcc.config$gcc_version_id.lua <<EOF
-- Automatically created gcc config for LB's lua scripts. Do not edit.

gcc_config$gcc_version_id = {
	target_toolchain_dir="$LDBOX_TARGET_TOOLCHAIN_DIR",

	cross_gcc_prefix_list="$LDBOX_CROSS_GCC_PREFIX_LIST",
	cross_gcc_dir="$LDBOX_CROSS_GCC_DIR",
	cross_gcc_progs_path="$LDBOX_CROSS_GCC_PROGS_PATH",
	cross_gcc_version="$LDBOX_CROSS_GCC_VERSION",
	cross_gcc_shortversion="$LDBOX_CROSS_GCC_SHORTVERSION",

	extra_cross_compiler_args="$LDBOX_EXTRA_CROSS_COMPILER_ARGS",

	cross_gcc_subst_prefix="$LDBOX_CROSS_GCC_SUBST_PREFIX",
	cross_gcc_specs_file="$LDBOX_CROSS_GCC_SPECS_FILE",
	extra_cross_compiler_stdinc="$LDBOX_EXTRA_CROSS_COMPILER_STDINC",
	block_cross_compiler_args="$LDBOX_BLOCK_CROSS_COMPILER_ARGS",

	extra_cross_ld_args="$LDBOX_EXTRA_CROSS_LD_ARGS",
	block_cross_ld_args="$LDBOX_BLOCK_CROSS_LD_ARGS",
}

add_cross_compiler(gcc_config$gcc_version_id, "$gcc_version")

EOF

	if [ -n "$verbose" ] ; then
		echo "Finished writing lb.gcc.config"
	fi
}

# LB_GCC_INIT_* variables are used to record who & when this
# toolchain was initialized
# It is possible to set LB_GCC_INIT_ID externally (for example, if
# another program is used to initialize the system)
LB_GCC_INIT_ORIG_ARGS="$*"
LB_GCC_INIT_TIME=`date +%Y-%m-%d_%H:%M:%S`
if [ -z "$LB_GCC_INIT_ID" ]; then
	LB_GCC_INIT_ID="user '$USER'"
fi

LDBOX_EXTRA_CROSS_COMPILER_ARGS=""

if [ -z "$*" ]; then
	usage
fi

verbose=""

while getopts t:m:C:L:A:M:hS:R:Vv option
do
	case $option in
	(A) ARCH=$OPTARG ;;
	(M) MACHINE_ARCH=$OPTARG ;;
	(h) usage ;;
	(t) TARGET=$OPTARG ;;
	(m) MAPPING_MODE=$OPTARG ;;
	(C) LDBOX_EXTRA_CROSS_COMPILER_ARGS="$LDBOX_EXTRA_CROSS_COMPILER_ARGS $OPTARG " ;;
	(L) LDBOX_EXTRA_CROSS_LD_ARGS="$LDBOX_EXTRA_CROSS_LD_ARGS $OPTARG " ;;
	(S) ;;
	(R) LDBOX_TARGET_ROOT=$OPTARG ;;
	(V) SECONDARY_COMPILER=yes ;;
	(v) verbose=yes ;;
	(*) usage ;;
	esac
done
shift $(($OPTIND - 1))

case "$1" in
*:*)	# Has a path to specs
	GCC=`echo $1 | cut -d : -f 1`
	GCC_SPECS=`echo $1 | cut -d : -f 2`
	;;
*)	GCC=$1
	GCC_SPECS=""
	;;
esac

# ---------- Check parameters

if [ -z "$TARGET" ]; then
        echo "Error: no target given"
        exit 1
fi

LDBOX_CONFIG_DIR=~/.ldbox/$TARGET/lb.config.d

if [ -z "$LDBOX_TARGET_ROOT" ]; then
        echo "Error: no target_root given"
        exit 1
fi

if [ ! -d $LDBOX_TARGET_ROOT ]; then
        echo "Error: Target root directory does not exist"
        exit 1
fi

if [ -z "$MAPPING_MODE" ]; then
        echo "Error: no mapping mode given"
        exit 1
fi

if [ ! -d $LDBOX_SHARE_DIR/modes/$MAPPING_MODE ]; then
	echo "Invalid mapping mode: $MAPPING_MODE"
	exit 1
fi

if [ -z "$GCC" ]; then
	echo "Error: no compiler given"
	exit 1
fi

case "$GCC_SPECS" in
"")	# not specified, this is ok
	;;
/*)	# absolute path
	if [ ! -f $GCC_SPECS ]; then
		echo "Error: compiler specs file ($GCC_SPECS) does not exist."
		exit 1
	fi
	;;
*)	# relative path
	echo "Error: path to specs file ($GCC_SPECS) is not absolute."
	exit 1
esac

GCC_FULLPATH=$(which $GCC)
# test that gcc exists and can be executed
if [ $? != 0 ]; then
	echo "$GCC doesn't exist"
	exit 1
fi

LDBOX_CROSS_GCC_DIR=$(dirname $(which $GCC))
if [ $GCC -v > /dev/null 2>&1 != 0 ]; then
	echo "Invalid compiler specified: $GCC"
	exit 1
fi

# ---------- end of parameter checks

case "$(basename $GCC)" in
(*-*)	# $GCC contains a prefix
	GCC_PREFIX=$(basename $GCC | sed 's/-gcc$/-/')
	;;
(*)	# No embedded prefix
	GCC_PREFIX=""
	;;
esac

LDBOX_CROSS_GCC_VERSION=`$GCC -dumpversion`

# Create a version string with two digits
LDBOX_CROSS_GCC_SHORTVERSION=`echo $LDBOX_CROSS_GCC_VERSION |
	sed -e 's/^\([0-9][0-9]*\.[0-9][0-9]*\)\..*/\1/'`

GCC_TARGET=$($GCC -dumpmachine)

if [ -z "$ARCH" ]; then
	if [ -n "$verbose" ] ; then
		echo "Using $GCC to detect target architecture:"
	fi
	ARCH=$(echo $GCC_TARGET | awk -F- '{ print $1 }')
else
	if [ -n "$verbose" ] ; then
		echo "Target architecture set to $ARCH"
	fi
fi
if [ -z "$MACHINE_ARCH" ]; then
	MACHINE_ARCH=$ARCH
fi

# Path where gcc searches for sub-tools (ld, as, cc1,..)
LDBOX_CROSS_GCC_PROGS_PATH=$($GCC -print-search-dirs|grep ^programs:|sed 's/programs: =//')

# default for the cross-gcc prefix list:
# these may be changed by modes/$MAPPING_MODE/lbrc

LBINIT_CROSS_GCC_PREFIX_LIST=$ARCH-linux-

# $ARCH and $MACHINE_ARCH have been set, get mode-specific settings..
if [ -f $LDBOX_SESSION_DIR/modes/$MAPPING_MODE/lbrc ]; then
	if [ -n "$verbose" ] ; then
		echo "Reading mode-specific settings.."
	fi
	. $LDBOX_SESSION_DIR/modes/$MAPPING_MODE/lbrc "initializing"
fi


# Use "specs" file for gcc if it exists, otherwise add -I/usr/include to params
LDBOX_CROSS_GCC_SPECS_FILE=""
LDBOX_EXTRA_CROSS_COMPILER_STDINC=""

# FIXME: LDBOX_CROSS_GCC_SPECS_FILE may point to $LDBOX_SHARE_DIR/modes
# after this. It should point to a session-specific location, but we don't have any
# mechanism for that currently.
if [ -n "$GCC_SPECS" ]; then
	# the file was specified on the command line
	LDBOX_CROSS_GCC_SPECS_FILE="$GCC_SPECS"
# else try to locate a specs file which was provided with gcc
elif [ -f $LDBOX_SHARE_DIR/modes/$MAPPING_MODE/gcc-$LDBOX_CROSS_GCC_VERSION-specs-$ARCH ]; then
	LDBOX_CROSS_GCC_SPECS_FILE="$LDBOX_SHARE_DIR/modes/$MAPPING_MODE/gcc-$LDBOX_CROSS_GCC_VERSION-specs-$ARCH"
elif [ -f $LDBOX_SHARE_DIR/modes/$MAPPING_MODE/gcc-$LDBOX_CROSS_GCC_VERSION-specs ]; then
	LDBOX_CROSS_GCC_SPECS_FILE="$LDBOX_SHARE_DIR/modes/$MAPPING_MODE/gcc-$LDBOX_CROSS_GCC_VERSION-specs"
elif [ -f $LDBOX_SHARE_DIR/modes/$MAPPING_MODE/gcc-$LDBOX_CROSS_GCC_SHORTVERSION-specs ]; then
	LDBOX_CROSS_GCC_SPECS_FILE="$LDBOX_SHARE_DIR/modes/$MAPPING_MODE/gcc-$LDBOX_CROSS_GCC_SHORTVERSION-specs"
elif [ -f $LDBOX_SHARE_DIR/modes/$MAPPING_MODE/gcc-specs ]; then
	LDBOX_CROSS_GCC_SPECS_FILE="$LDBOX_SHARE_DIR/modes/$MAPPING_MODE/gcc-specs"
else
	LDBOX_EXTRA_CROSS_COMPILER_STDINC="-I/usr/include"
fi

# Note: "lb" script will replace "@LDBOX_TARGET_ROOT@" by the real
# value when the session is created.
LDBOX_EXTRA_CROSS_COMPILER_ARGS="$LDBOX_EXTRA_CROSS_COMPILER_ARGS -L@LDBOX_TARGET_ROOT@/usr/lib -L@LDBOX_TARGET_ROOT@/lib"

# test if the cross compiler needs to be silenced about /usr/include
# usage ("gcc -E -Wno-poison-system-directories" is not a reliable way for
# testing this; instead check if ld has the related flag)
txt=`$GCC_FULLPATH -Wl,--help | grep no-poison-system-directories`
case "$txt" in
	(*no-poison-system-directories*)	# option is available
		LDBOX_EXTRA_CROSS_COMPILER_ARGS="$LDBOX_EXTRA_CROSS_COMPILER_ARGS -Wno-poison-system-directories"
		;;
	(*)					# not available.
		;;
esac

##### HOST_GCC_INC=$(echo "#include <stdio.h>" | gcc -M -E - | LDBOX_SHARE_DIR=$LDBOX_SHARE_DIR perl -e 'while(<STDIN>) { $foo{$1} = 1 if m/\/usr([^[:space:]]*\/include)/;}; foreach my $k (keys %foo) {print " -isystem $ENV{LDBOX_SHARE_DIR}/host_usr$k"};')

if [ -z "$SECONDARY_COMPILER" ] ; then
	write_gcc_config
else
	write_gcc_config $LDBOX_CROSS_GCC_VERSION
fi

if [ -n "$verbose" ] ; then
	echo "gcc configured."
fi

log_config_action "gcc configured ($LDBOX_CROSS_GCC_VERSION)"
if [ -n "$LDBOX_CROSS_GCC_SPECS_FILE" ]; then
	log_config_action "(gcc specs from $LDBOX_CROSS_GCC_SPECS_FILE)"
fi

exit 0
