#!/bin/sh
#
# lb-session - interactive session management for ldbox
#
# This script can be used to save existing sessions even when
# ldbox was started without specifying '-S' -option.  This is
# usefull in cases where you have cloned target and installed
# some packages there and don't want it to go away when you
# exit lb.
#
# Copyright (C) 2009 Mika Westerberg
# Licensed under GPL version 2
#
prog="$0"
progbase=`basename $0`
session_save_dir="$HOME/.ldbox/saved_sessions"

usage()
{
	cat <<EOF
Usage:	$progbase help
	$progbase save
	$progbase list
	$progbase delete SESSION
	$progbase attach [SESSION] [PARAMETERS]
	$progbase setenv VARIABLE VALUE
	$progbase showenv

Commands:
	help		shows this help
	save		saves current session
	list		lists detached lb sessions
	delete		deletes given session
	attach		attaches to saved lb session
	setenv		store a value for an environment variable
	showenv		show stored environment variables

This helper program can be used to create attachable ldbox sessions.
You can save session even when you haven't done '-S session' during
lb startup.

Note that you can give parameters to 'attach' command which are passed
verbatim to lb.  If there is only one session to attach, it is selected
automatically.

Basic usage is:

	[LB .. ] $ lb-session save	# save session
	[LB .. ] $ ^D			# exit

later on we can then attach to this session:

	% lb-session attach

if there are more than one saved sessions, then:

	% lb-session list
	session.XXXX	TARGET_ARM	My Comment
	session.YYYY	TARGET_ARM	My Comment 2
	session.ZZZZ	TARGET_MIPS	
	% lb-session attach session.YYYY

Here we pass '-eR' to lb and we only have one saved session:

	% lb-session attach -- -eR

'--' is marks end of parameter list for lb-session.


About environment variables:

"$progbase setenv VARIABLE VALUE" can be used to add environment variables,
that will become active when a saved session is later taken into use (either
by "lb-session attach" or by "lb -J")

"$progbase setenv VARIABLE VALUE" does not change environment of sessions that
are already active.

"$progbase showenv" lists environment variable settings which have been stored
with this tool. It does not show environment variables from other sources.
EOF
	exit 1
}

write_session_info()
{
	session_descr="$1"
	session_info_file=$(mktemp -p $session_save_dir session.XXXXX)

	cat >> "$session_info_file" <<END
# LB SessionInfo:
# generated by lb-session
LDBOX_SESSION_DIR=$LDBOX_SESSION_DIR
LDBOX_SESSION_DESCRIPTION="$session_descr"
LDBOX_TARGET=$ldbox_target
END

	#
	# Make the session "joinable".  This keeps lb
	# from removing the session directory. 
	#
	touch $LDBOX_SESSION_DIR/.joinable-session
}

die()
{
	echo $1
	exit $2
}

attach_session()
{
	if [ "$#" -eq 0 ]; then
		session="--"
	else
		session="$1"
		shift
	fi

	if [ -z "$session" -o "$session" = "--" ]; then
		#
		# No session id given.  This means that there should
		# only be one session and we should use that.
		#
		count=$( ls $session_save_dir/session.* 2>/dev/null | wc -l )
		if [ "$count" -eq 1 ]; then
			session_file=$( ls $session_save_dir/session.* )
		elif [ "$count" -eq 0 ]; then
			die "No saved sessions available!" 1
		else
			die "You must specify session as parameter!" 1
		fi
	else
		session_file="$session_save_dir/$session"
		if [ ! -e "$session_file" ]; then
			die "Given session '$session' doesn't exist!" $?
		fi
	fi

	exec lb -J $session_file $*
}

save_session()
{
	echo -n "Session description: "
	read session_descr
	write_session_info "$session_descr"
}

list_sessions()
{
	for s in $( ls $session_save_dir/session.* 2>/dev/null ); do
		session_file=$(basename $s)
		session_descr=$( grep LDBOX_SESSION_DESCRIPTION $s | \
		    sed 's/LDBOX_SESSION_DESCRIPTION="\([^"]*\)"/\1/' )
		session_target=$( grep LDBOX_TARGET $s | \
		    sed 's/LDBOX_TARGET=\([^"]*\)/\1/' )
		printf "%s\t%s\t%s\n" "$session_file" "$session_target" \
		    "$session_descr"
	done
}

delete_session()
{
	session="$1"

	[ -z "$session" ] && usage
	if [ ! -e "$session_save_dir/$session" ]; then
		die "Given session '$session' doesn't exist!" $?
	fi

	lb -D "$session_save_dir/$session"
}

set_env_var()
{
	varname="$1"
	[ -z "$varname" ] && usage

	shift
	value="$*"

	if [ $inside_lb -eq 1 ]; then
		mkdir -p "$LDBOX_SESSION_DIR/env_vars"
		echo "$varname=\"$value\"" >$LDBOX_SESSION_DIR/env_vars/$varname
	else
		die "'lb-session setenv' must be used inside existing session!" $?
	fi
}

show_env_vars()
{
	if [ $inside_lb -eq 1 ]; then
		count=$( ls $LDBOX_SESSION_DIR/env_vars/* 2>/dev/null | wc -l )
		if [ "$count" -gt 0 ]; then
			cat $LDBOX_SESSION_DIR/env_vars/*
		fi
	else
		die "'lb-session showenv' must be used inside existing session!" $?
	fi
}

if [ $# -lt 1 ]; then
	usage
fi

command="$1"
shift

if [ ! -e "$session_save_dir" ]; then
	/bin/mkdir $session_save_dir 2>/dev/null ||
	    die "unable to create session save directory: $saved_sessions_dir" $rc
fi

if [ -z "$LDBOX_SESSION_DIR" ]; then
	inside_lb=0
else
	inside_lb=1
fi

# validate that target binary really exists, otherwise lb-show fails
case "$command" in
	help)
		usage
		;;
	attach)
		if [ $inside_lb -ne 0 ]; then
			echo -n "'attach' command cannot be run from inside "
			echo "lb session"
			exit 1
		fi
		attach_session $*
		;;

	save)
		#
		# Validate that we really are inside active lb
		# session before.  Otherwise it is hard to save
		# it.
		#
		if [ $inside_lb -ne 1 ]; then
			echo -n "'save' command can only be run from inside "
			echo "lb session"
			exit 1
		fi

		. $LDBOX_SESSION_DIR/lb-session.conf.sh

		save_session
		;;

	list)
		list_sessions
		;;

	delete)
		if [ $inside_lb -ne 0 ]; then
			echo -n "'delete' command cannot be run from inside "
			echo "lb session"
			exit 1
		fi

		delete_session "$1"
		;;

	setenv)
		set_env_var $*
		;;

	showenv)
		show_env_vars
		;;

	*)
		die "invalid command: $command" 1
esac
