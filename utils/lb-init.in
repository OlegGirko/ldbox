#!/bin/bash
# lb-init - Copyright (C) 2007 Lauri Leukkunen <lle@rahina.org>
# Licensed under GPL version 2

prefix="@prefix@"
exec_prefix="@exec_prefix@"
bindir="@bindir@"
libdir="@libdir@"
datadir="@datadir@"
LDBOX_BIN_DIR="${bindir}"
LDBOX_SHARE_DIR="${datadir}/ldbox"

function log_config_action()
{
	tstamp=`/bin/date '+%Y-%m-%d %H:%M:%S'`
	echo "$tstamp	$*" >>$LDBOX_CONFIG_DIR/CONFIG-LOG
}

# Get the original arguments that were specified to lb-init from
function show_existing_config_info()
{
	has_targets="no"
	echo "Already initialized targets:"
	echo
	for f in $HOME/.ldbox/*/lb.config; do
		if [ -f $f ]; then
			LDBOX_CONFIG_VERSION=0
			. $f
			has_targets="yes"
			targetdir=`dirname $f`
			targetname=`basename $targetdir`
			echo "Target $targetname:"
			if [ -d "$LDBOX_TARGET_ROOT" ]; then
				if [ "$LDBOX_CONFIG_VERSION" -lt 5 ]; then
					echo "(configuration file version too old)"
				else
					echo "configured at $LDBOX_INIT_TIME by $LDBOX_INIT_ID, with command"
					echo "( cd $LDBOX_TARGET_ROOT;"
					echo "lb-init $LDBOX_INIT_ORIG_ARGS )"
				fi
			else
				echo "(out of order - target root directory does not exist)"
			fi
			echo
		fi
	done
	if [ has_targets = "no" ]; then
		echo "none."
	fi
}

function usage()
{
	cat <<EOF
lb-init - initialize a target root for ldbox
Usage:
	lb-init [OPTION]... [TARGETNAME] [COMPILER[:SPECS]] [SECONDARY_COMPILER...]

lb-init is expected to be run in the directory you want
to use as scratchbox 2 target root.

TARGETNAME is what you want to call this target
COMPILER is of the form $HOME/arm-2006q3/bin/arm-linux-gcc
SPECS is path to the compiler scpecs file.
If more than one compiler is specified, the additional compilers
are available by version number (e.g. if the primary is known as
"gcc" and "gcc-4.1", the secondary may be "gcc-3.4", etc)


Options:
    -c "command"      specify cpu transparency command, for example:
                      "qemu-arm", "sbrsh" or "qemu-arm -m 512"
    -p "command"      specify cpu transparency command for staticly linked
                      native binaries
    -r [hostname]     generate sbrsh config using remote device address
    -l [hostname]     NFS server/localhost address seen by remote device
    -d                set target as default ldbox target
    -m [mapping_mode] use mapping_mode as default
    -h                print this help
    -n                don't build libtool for the target
    -N                don't generate localization files for the target
    -s                skip checks for target root's /usr/include etc.
    -t [tools_dir]    set directory containing the build tools distribution
    -C "options"      add extra options for the compiler, for example:
                      "-fgnu89-inline"
    -L "options"      add extra options for the linker, for example:
                      "--sysroot=/"
    -A arch           manually override target architecture
    -M arch           manually override machine name (see uname(2)). This
                      defaults to the target architecture (see option -A)
    -P PREFIX         define toolchain prefix (may be used multiple times)
    -v                display version

Examples:
    lb-init -c qemu-arm ARM arm-linux-gcc
    lb-init -c qemu-arm -m devel ARM arm-linux-gcc
    lb-init -sn -c sbrsh armel-debian /path/to/arm-linux-gcc:/path/to/gcc-specs

EOF
	show_existing_config_info
	exit 2
}

function version()
{
	cat $LDBOX_DATA_DIR/version
	exit 0
}

# Create the old-style configuration file.
# TODO: This system will be replaced by smaller configuration files 
# that live in $LDBOX_CONFIG_DIR directory.
function write_target_config()
{
	cat - > $HOME/.ldbox/$TARGET/lb.config <<EOF
# ldbox configuration file generated by lb-init.

LDBOX_INIT_ORIG_ARGS="$LDBOX_INIT_ORIG_ARGS"
LDBOX_INIT_TIME=$LBINIT_INIT_TIME
LDBOX_INIT_ID="$LBINIT_INIT_ID"

LDBOX_CONFIG_VERSION=10

LDBOX_TARGET_ROOT=$LDBOX_TARGET_ROOT

LDBOX_CPU=$ARCH
LDBOX_CPUTRANSPARENCY_METHOD="$LBINIT_CPUTRANSP"
LDBOX_CPUTRANSPARENCY_NATIVE_METHOD="$LBINIT_CPUTRANSP_NATIVE"
LDBOX_UNAME_MACHINE=$MACHINE_ARCH

LDBOX_HOST_GCC_NAME="$LBINIT_LDBOX_HOST_GCC_NAME"
LDBOX_HOST_GCC_PREFIX_LIST="$LBINIT_LDBOX_HOST_GCC_PREFIX_LIST"
LDBOX_HOST_GCC_SUBST_PREFIX=
LDBOX_HOST_GCC_SPECS_FILE=
LDBOX_HOST_GCC_DIR=/usr/bin
LDBOX_HOST_GCC_LD_ARGS=
LDBOX_EXTRA_HOST_COMPILER_ARGS="$HOST_GCC_INC"

SBRSH_CONFIG=$HOME/.ldbox/$TARGET/sbrsh.config

if [ -z "\$LDBOX_MAPMODE" ]; then
	LDBOX_MAPMODE=$MAPPING_MODE
fi

LDBOX_TOOLS_ROOT=$LBINIT_TOOLS_ROOT

EOF
	echo "Finished writing lb.config"
}

function write_sbrsh_config()
{
	cat - > $HOME/.ldbox/$TARGET/sbrsh.config <<EOF
# sbrsh configuration file generated by lb-init.

$TARGET  $LBINIT_REMOTEHOST
  nfs   $LBINIT_LOCALHOST:$LDBOX_TARGET_ROOT  /  rw,nolock,noac,tcp
  nfs   $LBINIT_LOCALHOST:$HOME  $HOME  rw,nolock,noac,tcp
  bind  /tmp      /tmp
  bind  /proc     /proc
  bind  /sys      /sys
  bind  /dev      /dev
  bind  /dev/pts  /dev/pts
EOF
	echo "Finished writing sbrsh.config"
}

function check_buildroot_sanity()
{
	a_ok=1

	if [ ! -e usr/include/stdio.h ]; then
		echo "no usr/include/stdio.h"
		a_ok=0
	fi

	if [ ! -e lib/libc.so.6 ] && [ ! -e lib/libc.so.0 ]; then
		echo "no lib/libc.so.6 or lib/libc.so.0"
		a_ok=0
	fi

	if [ ! -e usr/lib/libc.so ]; then
		echo "no usr/lib/libc.so"
		a_ok=0
	fi
	
	if [ $a_ok == 1 ]; then
		true
	else
		echo "Your buildroot seems to lack basic essentials like headers 
or c-library. You should probably get either a ready rootfs tarball or
copy the necessary files from your toolchain into place. After doing that
you can re-run this script."
		exit 1
	fi
}

function configure_toolchains()
{
	secondary_compiler=""
	local -a toolchain_prefix_args=()

	if [ -n "$LBINIT_ARCH" ]; then
		gccconfig_arch_option="-A $LBINIT_ARCH"
	else
		gccconfig_arch_option=""
	fi
	if [ -n "$LBINIT_MACHINE_ARCH" ]; then
		gccconfig_arch_option2="-M $LBINIT_MACHINE_ARCH"
	else
		gccconfig_arch_option2=""
	fi
	for prefix in "${LBINIT_TARGET_TOOLCHAIN_PREFIX[@]}"; do
		toolchain_prefix_args[${#toolchain_prefix_args[@]}]=-P
		toolchain_prefix_args[${#toolchain_prefix_args[@]}]="$prefix"
	done
	for compiler_path in $*; do
		log_config_action "lb-init: configuring toolchain, compiler $compiler_path"
		$LDBOX_SHARE_DIR/scripts/lb-config-gcc-toolchain \
			-v \
			$secondary_compiler \
			$gccconfig_arch_option \
			$gccconfig_arch_option2 \
			"${toolchain_prefix_args[@]}" \
			-R "$LDBOX_TARGET_ROOT" \
			-t "$TARGET" \
			-m "$MAPPING_MODE" \
			-C "$LBINIT_LDBOX_EXTRA_CROSS_COMPILER_ARGS" \
			-L "$LBINIT_LDBOX_EXTRA_CROSS_LD_ARGS" \
			-- \
			$compiler_path
		if [ $? != 0 ]; then
			log_config_action "lb-init: failed to configure $compiler_path"
			echo "Failed to configure $compiler_path"
			exit 1
		fi
		secondary_compiler="-V"
	done
}

# Use an array to preserve spaces in original arguments:
declare -a init_orig_args_array
init_orig_args_array=("$@")

# make a printable version:
LDBOX_INIT_ORIG_ARGS=""
for arg in "${init_orig_args_array[@]}"; do
	case "$arg" in
	(*[[:space:]]*)	pr_arg="'""$arg""'";;
	(*)		pr_arg="$arg";;
	esac

	if [ -z "$LDBOX_INIT_ORIG_ARGS" ]; then
		LDBOX_INIT_ORIG_ARGS="$pr_arg"
	else
		LDBOX_INIT_ORIG_ARGS="$LDBOX_INIT_ORIG_ARGS $pr_arg"
	fi
done

# No parameters => show usage and exit.
if [ -z "$LDBOX_INIT_ORIG_ARGS" ]; then
	usage
fi

# Parse parameters (round 1); don't write anything to the config directory yet,
# because a) name of the target is currently unknown, b) there might be 
# errors in the parameters, or c) if the user is just requesting help or
# version and we are not actually going to configure anything.
eval "$($LDBOX_SHARE_DIR/scripts/lb-parse-lb-init-args "${init_orig_args_array[@]}")"

TARGET=$LBINIT_TARGET
LDBOX_TARGET_ROOT=$LBINIT_TARGET_ROOT

MAPPING_MODE=$LBINIT_MAPPING_MODE

# ---------- Check parameters

if [ "$LBINIT_SHOW_USAGE" == 1 -o "$LBINIT_ERROR" == 1 ]; then
	usage
fi

if [ "$LBINIT_SHOW_VERSION" == 1 ]; then
	version
fi

if [ "$LBINIT_LOCALHOST" ] && [ -z "$LBINIT_REMOTEHOST" ]; then
	echo "Warning: Local host specified without remote host."
fi

case "$TARGET" in
	*/*)
		echo "Error: Illegal character (/) in target name"
		exit 1
		;;
	"")
		echo "Error: no target given"
		exit 1
		;;
esac

if [ -z "$MAPPING_MODE" ]; then
	MAPPING_MODE="simple"
	echo "Info: Mapping mode not specified, using default ($MAPPING_MODE)"
fi

if [ ! -d $LDBOX_SHARE_DIR/modes/$MAPPING_MODE ]; then
	echo "Invalid mapping mode: $MAPPING_MODE"
	exit 1
fi

# ---------- end of parameter checks

mkdir -p $HOME/.ldbox/$TARGET

LDBOX_CONFIG_DIR=~/.ldbox/$TARGET/lb.config.d
if [ ! -d $LDBOX_CONFIG_DIR ]; then
        mkdir $LDBOX_CONFIG_DIR
fi
log_config_action "lb-init $LDBOX_INIT_ORIG_ARGS"

# Parse parameters (round 2); store parameters to the config directory.
# "$LDBOX_CONFIG_DIR/lb-init-args" can be overwritten by lb-init or
# lb-upgrade-config; the config log should identify who did what..
$LDBOX_SHARE_DIR/scripts/lb-parse-lb-init-args "${init_orig_args_array[@]}" \
	>$LDBOX_CONFIG_DIR/lb-init-args

if [ -z "$LBINIT_COMPILERS" ]; then
	echo "Warning: no compiler given"
	ARCH=$LBINIT_ARCH
else
	configure_toolchains $LBINIT_COMPILERS
	# get ARCH from the primary gcc config file
	. $HOME/.ldbox/$TARGET/lb.config.d/gcc.config.sh
	ARCH=$LB_GCC_INIT_ARCH
fi
echo "lb-init: Target architecture is '$ARCH'"

if [ -z "$LBINIT_MACHINE_ARCH" ]; then
	MACHINE_ARCH=$ARCH
else
	# forced by a command-line option.
	MACHINE_ARCH=$LBINIT_MACHINE_ARCH
	echo "lb-init: Target machine is '$LBINIT_MACHINE_ARCH'"
fi

HOST_ARCH="$(uname -m)"
if echo "$HOST_ARCH" | grep -q "^i.86*"; then
	HOST_ARCH="i[3456]86"
fi
echo "lb-init: Host architecture is '$HOST_ARCH'"

DEFAULT_CPUTRANSP=""
case "$ARCH" in
	$HOST_ARCH*) ;;

	arm*)	DEFAULT_CPUTRANSP="qemu-$ARCH" ;;
	ppc*)	DEFAULT_CPUTRANSP="qemu-$ARCH" ;;
	mips*)	DEFAULT_CPUTRANSP="qemu-$ARCH" ;;
	sh*)	DEFAULT_CPUTRANSP="qemu-$ARCH" ;;

	# No DEFAULT_CPUTRANSP for any of the x86 architectures:
	i386*) ;;
	i486*) ;;
	i586*) ;;
	i686*) ;;
	amd64*) ;;
	x86_64*) ;;
        aarch64*) ;;
	*)
		echo "Unsupported target architecture: '$ARCH'"
		echo "You must add support for it into execs/lb_exec.c"
		echo "and utils/lb-init"
		exit 1
		;;

esac

if ! expr "$ARCH" : "$HOST_ARCH" > /dev/null ; then
	# Host arch. != target arch

	if [ -z "$LBINIT_CPUTRANSP" ]; then
		# CPU transparency was not specified...

		if [ -z "$DEFAULT_CPUTRANSP" ]; then
			# ...and there is no default CPU transparency method.
			# This may be an error, or may not be: If one has a 64-bit host,
			# but develops for an 32-bit Intel target, the architecture 
			# strings are different but Qemu is not needed.
			echo "lb-init: WARNING:"
			echo "lb-init: *******  Host architecture is different than target architecture,"
			echo "lb-init: *******  but CPU transparency was not set. This may not be what"
			echo "lb-init: *******  you want (maybe you should run lb-init again and"
			echo "lb-init: *******  specify 'qemu-$ARCH' as the CPU transparency method?)"
		else
			# ...try to use the default CPU transparency.
			_cputransp=$(which $DEFAULT_CPUTRANSP)
			if [ -n "$_cputransp" -a -e "$_cputransp" ]; then
				LBINIT_CPUTRANSP=$_cputransp
			else
				echo "lb-init: WARNING:"
				echo "lb-init: *******  default CPU transparency ($DEFAULT_CPUTRANSP) can not"
				echo "lb-init: *******  be located or executed. Maybe you should run lb-init "
				echo "lb-init: *******  again and specify a working CPU transparency method"
				echo "lb-init: *******  with the '-c' option?"
			fi
		fi
	fi
	if [ -n "$LBINIT_CPUTRANSP" ]; then
		if [ -e "$LBINIT_CPUTRANSP" ]; then
			case `file $LBINIT_CPUTRANSP` in
				*dynamically*)
					# This is OK.
					;;
				*statically*)
					echo "lb-init: ERROR:"
					echo "lb-init: *******  CPU transparency ($LBINIT_CPUTRANSP) seems"
					echo "lb-init: *******  to be a statically linked binary, and can't be used."
					echo "lb-init: *******  (please specify a dynamically linked alternative"
					echo "lb-init: *******  with option -c)"
					exit 1
					;;
				*script*)
					echo "lb-init: WARNING:"
					echo "lb-init: *******  CPU transparency ($LBINIT_CPUTRANSP) is a script."
					echo "lb-init: *******  This may not work; the program should be a dynamically"
					echo "lb-init: *******  linked executable."
					;;
				*)
					echo "lb-init: WARNING:"
					echo "lb-init: *******  Failed to check if the CPU transparency ($LBINIT_CPUTRANSP)"
					echo "lb-init: *******  method is a dynamically linked executable."
					;;
			esac
		else
			echo "lb-init: ERROR:"
			echo "lb-init: *******  CPU transparency ($LBINIT_CPUTRANSP) can not"
			echo "lb-init: *******  be executed."
			echo "lb-init: *******  (please specify a dynamically linked alternative"
			echo "lb-init: *******  with option -c)"
			exit 1
		fi
	fi
fi

# $ARCH has been set, get mode-specific settings..
if [ -f $LDBOX_SESSION_DIR/modes/$MAPPING_MODE/lbrc ]; then
	echo "Reading mode-specific settings.."
	. $LDBOX_SESSION_DIR/modes/$MAPPING_MODE/lbrc "initializing"
fi

if [ ! $LBINIT_SKIP_CHECKS ]; then
	check_buildroot_sanity
fi

mkdir -p $HOME/.ldbox

if [ -z "$($LDBOX_BIN_DIR/lb-config -l)" ]; then
	# force this as default anyway as there are no
	# other existing targets
	LBINIT_SET_AS_DEFAULT=1
fi

if [ -n "$LBINIT_TOOLS_ROOT" ]; then
	if [ -e "$LBINIT_TOOLS_ROOT/etc/scratchbox-version" ]; then
		# this is a scratchbox 1.x directory, tread carefully
		# sb1 is not FHS, *sigh*
		LBINIT_TOOLS_ROOT=$LBINIT_TOOLS_ROOT/tools
	fi
	# else assume standard FHS system
fi

_host_gcc=$(which gcc)
if [ -n "$_host_gcc" -a -e "$_host_gcc" ]; then
	HOST_GCC_INC=$(echo "#include <stdio.h>" | gcc -M -E - | LDBOX_SHARE_DIR=$LDBOX_SHARE_DIR perl -e 'while(<STDIN>) { $foo{$1} = 1 if m/\/usr([^[:space:]]*\/include)/;}; foreach my $k (keys %foo) {print " -isystem $ENV{LDBOX_SHARE_DIR}/host_usr$k"};')
	LBINIT_LDBOX_HOST_GCC_NAME=host-gcc
	LBINIT_LDBOX_HOST_GCC_PREFIX_LIST=host-
else
	echo "lb-init: no host-gcc."
	HOST_GCC_INC=""
	LBINIT_LDBOX_HOST_GCC_NAME=""
	LBINIT_LDBOX_HOST_GCC_PREFIX_LIST=""
fi

mkdir -p $HOME/.ldbox/$TARGET/bin
write_target_config

if [ -n "$LBINIT_REMOTEHOST" ]; then
	if [ -z "$LBINIT_LOCALHOST" ]; then
		LBINIT_LOCALHOST=$(ip -f inet -o addr \
			| awk -- '/: eth[0-9]/ { print $4; exit }' \
			| cut -d/ -f1)
		echo "Using NFS server address: $LBINIT_LOCALHOST"
	fi
	write_sbrsh_config
fi

# ---------------------------
# The target can be used now; it is possible to 
# finalize the configuration by running programs in the new environment.

if [ $LBINIT_SET_AS_DEFAULT == 1 ]; then
	$LDBOX_BIN_DIR/lb-config -d $TARGET
fi

# if the target system is (based on) debian,
# DEB_* environment variables are needed. We'll set them in any case:
echo "lb-init: Creating Debian build system settings for this target:"
$LDBOX_SHARE_DIR/scripts/lb-config-debian -t $TARGET
if [ $? != 0 ]; then
	log_config_action "lb-init: failed run lb-config-debian"
	echo "lb-init: lb-config-debian failed."
	exit 1
fi

#
# If target architecture is same as host (currently i386)
# we need to extract localization archive from target and
# place resulting files under ~/.ldbox/$LDBOX_TARGET/locales.
#
# We do the same check for tools here and generate necessary
# localization files if they are missing.
#
if [ $LBINIT_WITH_LOCALES == 1 ]; then
	if [ -n "$LBINIT_TOOLS_ROOT" ]; then
		$LDBOX_BIN_DIR/lb -t $TARGET \
		    $LDBOX_SHARE_DIR/scripts/lb-generate-locales -T
	fi

	if [ -z "$LBINIT_CPUTRANSP" ]; then
		$LDBOX_BIN_DIR/lb -t $TARGET \
		    $LDBOX_SHARE_DIR/scripts/lb-generate-locales
	fi
fi

if [ $LBINIT_WITH_LIBTOOL == 1 ]; then
	echo "lb-init: configuring libtool for this target:"
	$LDBOX_BIN_DIR/lb -t $TARGET $LDBOX_BIN_DIR/lb-build-libtool
	TEST=$?
	printf "\n\n"
	if [ $TEST == 0 ]; then
		echo "lb-init completed successfully, have fun!"
	else
		echo "Running $LDBOX_BIN_DIR/lb-build-libtool failed"
		echo "You can run this manually later, otherwise your"
		echo "ldbox environment is correctly setup and ready to use"
	fi
fi
